package org.lxh.demo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Environment;
import android.os.IBinder;

public class AlarmListenerService extends Service {
	/*
	 * 在Service中的变量会永驻内存.
	 * 完善的做法是把状态保存在这里,activity每次启动到这里取值更新控件
	 */
	/*final*/
	public static final String TCP_SERVICE_ACTION_CONNECT="abcd",TCP_SERVICE_ACTION_SEND="abce";
	
	static boolean serviceRan=false;
	public static boolean electric_sw=false;
	public static boolean light_opened=false;
	public static int eltNum=0;
	public static byte lightchar=0;
	public static byte elecAction=0;
	public static String notificationShowStr="test";
	private boolean alarmRecved=false;
	
	/*component*/
/*	public static PrintStream shOut;
	public static BufferedReader shBuf ;
	public static OutputStream os;
	public static InputStream is;*/
	public static TCPClient client;
	
	/*remote info*/
	public static boolean isConnect;
	public static boolean outMode=false;
	public static int str_num=6;
	public static int lightGroupNum=2;
	public static int wir_sws[]={0,1,1,0,1,0,0};
	public static byte lightStates[]=null;
	public static byte WIRING_ACTION_OPEN=1;
	public static int i;
	public static String rxStrBuf = null;
	boolean opened;
	static boolean mutexEnble=true;
	static byte cut_P6=0;
	static boolean checkChangeble=true;
	
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		// TODO Auto-generated method stub
		System.out.println("Service : onStartCommand");
		if(intent.getBooleanExtra("alarmRecved", false)){
			alarmRecved=true;
			electric_sw = intent.getBooleanExtra("electric", false);
			eltNum = intent.getIntExtra("electric_num", 1);
			lightchar=intent.getByteExtra("room_light", (byte)0);
			light_opened=intent.getBooleanExtra("openLight", false);
			System.out.println("Service start 35");
			return super.onStartCommand(intent, flags, startId);
		}
		String temp=intent.getAction();
		if(temp!=null&&temp.equals(TCP_SERVICE_ACTION_CONNECT)){

		}else if(temp!=null&&temp.equals(TCP_SERVICE_ACTION_SEND)){
			
		}
		
		serviceRan=true;
		return super.onStartCommand(intent, flags, startId);
	}

/**
 * 
 * @param txLong
 * @param rxLong 
 * @return true specified send successfully and get appropriate ACK;
 */
	public static boolean sendCmdByTCP(long[] txLong,long[] ackArr){
		int mutexTry=0;
		byte tx[],tmp[],rxTmp[],rxTmp2[];
		long rxArr[] = new long[256];
		//String rxStrBuf = null;
		tmp = new byte[4];
		tx  = new byte[txLong.length];
		rxTmp2 = new byte[1024];
		MyClientDemo.getLineNumber(new Exception());
		for(int i = 0 ; i < txLong.length/4;i++){
			tmp = HelpUtils.longToBytes(txLong[i]);
			System.arraycopy(tmp, 0, tx, i*4, 4);
		}
		System.out.println(" txlong :"+txLong[0]+txLong[1]+txLong[2]);
		MyClientDemo.getLineNumber(new Exception());
		while(!mutexEnble&&mutexTry<10){
			if(mutexTry==0)
			mutexTry++;
			if(mutexTry==10)
				return false;
		}
		
		//byte[] rx_buf = new byte[256];
		//String rxStr = null;
		//int read_len=0;
		if((null==client)||(!client.isConnected())){
			return false;
		}
		try {			
			mutexEnble=false;
			if((null!=client)&&client.isConnected()){
				client.write(tx, 0, tx.length/4);
			}
			System.out.print("tx buf:");
			for(int i=0;i<5;i++){
				System.out.print(" "+Integer.toHexString(tx[i]).toUpperCase()); 
			}
			System.out.println(" ");
			
			client.readBlockWithTime(rxTmp2, 5);
			while(!mutexEnble)
				Thread.sleep(500);
			if(rxArr.length/4 < rxStrBuf.length())
				return false;
			rxTmp = rxStrBuf.getBytes();
			
			for(int i=0;i<rxStrBuf.length();i++){
				System.arraycopy(rxTmp, i*4, tmp, 0, 4);
				rxArr[i] = HelpUtils.StrToLong(tmp); 
				System.out.println("long rx :" + rxArr[i]);
			}
			mutexEnble=true;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			mutexEnble=true;
		}		
		
		return false;
	}
	

	static int ImgNum=0;
	static int imgShowNum=0;
	static File dir=null;
	public boolean pic_foced=false;
	/**
	 * 
	 */
/*	public static void TCPConnectFunction(){
		try {
			if(null!=client&&(client.isConnected()&&(!client.isClosed()))){
				isConnect=false;
				System.out.println("function : TCPConnectFunction  :ready to close socket");
				client.close();
				return ;
			}
			System.out.println("readly to connet IP is " +MyClientDemo.IP + "Port is "+MyClientDemo.PORT);
			//client = new Socket(MyClientDemo.IP, MyClientDemo.PORT);				// 指定服务器
			//SocketAddress socAddress = new InetSocketAddress(MyClientDemo.IP,MyClientDemo.PORT); 
			//client.connect(socAddress, 5000);
			
			//smInfoText.setText("create Socket success");
			new Thread(
				new Runnable() {
					@Override
					public void run() {
						// TODO Auto-generated method stub
						try {
							client = new TCPClient(MyClientDemo.IP, MyClientDemo.PORT);
							System.out.println("create Socket success");
							os=client.getOutputStream();	
MyClientDemo.getLineNumber(new Exception());
							shOut = new PrintStream(
									os);				// 打印流输出
							is=client.getInputStream();
MyClientDemo.getLineNumber(new Exception());
							shBuf= new BufferedReader(		//输入流
									new InputStreamReader(
											is));		// 缓冲区读取
							if(null!=client&&(client.isConnected()&&(!client.isClosed()))){
								isConnect=true;
							}
						} catch (UnknownHostException e) {
							// TODO Auto-generated catch block
							System.out.println("new socket error!!");
							e.printStackTrace();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							System.out.println("new socket error!!");
							e.printStackTrace();
						}	
					}
			}).start();

		} catch (Exception e) {
			MyClientDemo.getLineNumber(e);
			System.out.println("new stream error!!");
			e.printStackTrace();
		}
	}*/
	

/*	*//**
	 * 
	 * @param s
	 * @return
	 *//*
 	public static Bitmap getPicByTCP(Socket s){
		 Bitmap bitmap = null;    
		 FileOutputStream fos=null;
		 FileInputStream fis=null;
		 byte buffer[]=new byte[1360];  
		 byte temp[]=new byte[1360];
		 String path;
		 int count;
		 String SDPATH=Environment.getExternalStorageDirectory()+"/";
		 dir=new File(SDPATH+"zigbeeTCP/");
		 if(!dir.exists())
			 dir.mkdir();
		 path=dir.getAbsolutePath()+"/temp"+ImgNum+".jpg";
		 File file=new File(path);
		 imgShowNum=ImgNum;
		 ImgNum++;
		if((null==s)||(!s.isConnected())){
			//Toast.makeText(MyClientDemo.this, "未连接到智能家居系统", Toast.LENGTH_SHORT).show();
			return null;
		}
		try {
			System.out.println("Current line:"+MyClientDemo.getLineNumber(new Exception()));
			if(!file.exists())
				file.createNewFile();
			fos=new FileOutputStream(file);  
					PrintStream psOut = new PrintStream(
					MyClientDemo.this.client.getOutputStream());				// 打印流输出
			
			InputStream is =MyClientDemo.this.client.getInputStream();
					mutexEnble=false;
			requestImg(qtClient,shOut);		//请求实时图片
			count=is.read(buffer);
			while((count)!=-1)  
			{  
				System.out.println("while count :"+count);
				fos.write(buffer);  
				if(count==-1||(count!=1360)){
					System.out.println("eof");
					break;
				}
				//count=is.read(temp);
				count=is.read(temp);
				buffer=new byte[count];
				System.arraycopy(temp, 0, buffer, 0, count);
			}  
			mutexEnble=true;
			fos.flush();
			bitmap=BitmapFactory.decodeFile(path);

			System.out.println("read pic success");
			if(!(bitmap==null)){
				//@w monitor_pic.setImageBitmap(bitmap);
				return bitmap;
			}

			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 return null;
	}*/
	NotificationManager manager;
	Notification notification;
    public void initNotification(String str) {
		manager = (NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE);
		// 创建一个Notification
		notification = new Notification();
		// 设置显示在手机最上边的状态栏的图标
		notification.icon =android.R.drawable.ic_menu_today;
		// 当当前的notification被放到状态栏上的时候，提示内容
		notification.tickerText = "日程：";
		notification.defaults=Notification.DEFAULT_SOUND;
		notification.audioStreamType= android.media.AudioManager.ADJUST_LOWER;
	// 点击状态栏的图标出现的提示信息设置
		//notification.setLatestEventInfo(this.context, c.getContent()+" ","  ", pendingIntent);
		Intent intent = new Intent(AlarmListenerService.this, MyClientDemo.class);
		PendingIntent pendIntent = PendingIntent.getActivity(AlarmListenerService.this, 0, intent, 0);  
		//notification.contentIntent = notificationIntent;
		notification.setLatestEventInfo(AlarmListenerService.this, "SMARTHOME 提醒您:", str, pendIntent);
		//manager.notify(1, notification);
		
	}
    public static Socket qtClient;
	public static PrintStream shOut;
	public static BufferedReader shBuf ;
	public static OutputStream os;
	public static InputStream is;
	
	public static void connectQtServer(){
		try {
			if(null!=qtClient&&(qtClient.isConnected()&&(!qtClient.isClosed()))){
				isConnect=false;
				qtClient.close();
				return ;
			}
			System.out.println("readly to connet");
			qtClient = new Socket(MyClientDemo.IP, MyClientDemo.qtPORT);				// 指定服务器
			//SocketAddress socAddress = new InetSocketAddress(MyClientDemo.IP,MyClientDemo.qtPORT); 
			//qtClient.connect(socAddress, 5000);
			
			System.out.println("create Socket success");
			os=qtClient.getOutputStream();	
			shOut = new PrintStream(
					os);				// 打印流输出
			is=qtClient.getInputStream();
			shBuf= new BufferedReader(		//输入流
					new InputStreamReader(
							is));		// 缓冲区读取
			if(null!=qtClient&&(qtClient.isConnected()&&(!qtClient.isClosed()))){
				isConnect=true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public static void requestImg(Socket client2,PrintStream ps) throws IOException{
		if(client2.isConnected()){
			ps.print("RequestImg");
		}			
	}
	 public static int count;
	 static byte buffer[]=new byte[1360]; 
	 static char bufChar[] = new char[1360];
	 static byte temp[]=new byte[1360];
	 static boolean FLAG_READ_PIC_COMPLETE =false;
	 static FileOutputStream fos=null;
	public static Bitmap getPicByTCP(Context c){
		 Bitmap bitmap = null;    
		 
		 FileInputStream fis=null;
		 int waitSec = 10;
		 
		 String path;
		
		 String SDPATH=Environment.getExternalStorageDirectory()+"/";
		 dir=new File(SDPATH+"zigbeeTCP/");
		 if(!dir.exists())
			 dir.mkdir();
		 path=dir.getAbsolutePath()+"/temp"+ImgNum+".jpg";
		 File file=new File(path);
		 imgShowNum=ImgNum;
		 ImgNum++;
			if((null==qtClient)||(!qtClient.isConnected())){
				//Toast.makeText(MyClientDemo.this, "未连接到智能家居系统", Toast.LENGTH_SHORT).show();
				return null;
			}
				try {
					System.out.println("Current line:"+MyClientDemo.getLineNumber(new Exception()));
					if(!file.exists())
						file.createNewFile();
					fos=new FileOutputStream(file);  
/*					PrintStream psOut = new PrintStream(
							MyClientDemo.this.qtClient.getOutputStream());				// 打印流输出
					
					InputStream is =MyClientDemo.this.qtClient.getInputStream();
*/					mutexEnble=false;
					requestImg(qtClient,shOut);		//请求实时图片
					
					/*new Thread(
							new Runnable() {
								@Override
								public void run() {
									try {
			//连接两个socket
										count=is.read(buffer);
										while((count)!=-1)  
										{  
											System.out.println("while count :"+count);
											fos.write(buffer);  
											if(count==-1||(count!=1360)){
												System.out.println("eof");
												break;
											}
											//count=is.read(temp);
											Skipped 151 frames!  The application may be doing too much work on its main thread.
											 * 
											count=is.read(temp);
											buffer=new byte[count];
											System.arraycopy(temp, 0, buffer, 0, count);
											Thread.sleep(30);
										}  										
										//mutexEnble=true;
									} catch (IOException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									} catch (InterruptedException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									FLAG_READ_PIC_COMPLETE = true;
								}
					}).start();*/
					PageTask task = new AlarmListenerService.PageTask(c);
					task.execute("param");
					while(!FLAG_READ_PIC_COMPLETE &&waitSec--!=0)
						Thread.sleep(5000);
					mutexEnble=true;
					fos.flush();
					count = 0;
					//is.reset();
					if(FLAG_READ_PIC_COMPLETE){
						bitmap=BitmapFactory.decodeFile(path);
						System.out.println("read pic success");
					}
					if(!(bitmap==null)){
						//@w monitor_pic.setImageBitmap(bitmap);
						return bitmap;
					}

					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		 return null;
	}
	
	public static boolean isConnectedTCP(){
		return (qtClient!=null&&qtClient.isConnected()&&qtClient.isClosed());
	}
	
	public static class PageTask extends AsyncTask<String, Integer, String> {
	        // 可变长的输入参数，与AsyncTask.exucute()对应
	        ProgressDialog pdialog;
	        InputStreamReader isReader;
	        public PageTask(Context context){
	        	isReader = new InputStreamReader(is);
	        }
			@Override
			protected String doInBackground(String... params) {
				// TODO Auto-generated method stub
				try {
//连接两个socket
					buffer = new byte[1360];
					count=is.read(buffer, 0, buffer.length);
					//isReader.read(bufChar, 0, bufChar.length);
					while((count)!=-1)  
					{  
						System.out.println("while count :"+count + "buffer[0]:"+ buffer[0]+ "buffer[1]" +buffer[1]);
						if(count==-1){//||(count!=1360)){
							System.out.println("eof or error");
							//fos.write(buffer, 0, count);
							break;
						}
						fos.write(buffer,0,count);  
						//count=is.read(temp);
						//Skipped 151 frames!  The application may be doing too much work on its main thread.
						// * 
						count=is.read(buffer, 0, 1360);
						/*count=is.read(temp);
						buffer=new byte[count];
						System.arraycopy(temp, 0, buffer, 0, count);*/
						Thread.sleep(30);
						
					}  										
					//mutexEnble=true;
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				FLAG_READ_PIC_COMPLETE = true;
				//temp = null;
				
				return null;
			}
			
			public int readFuully(InputStream is,byte[] buf,int desiredByteCount) throws IOException{
				int actualByteCount = 0;
				while(actualByteCount < desiredByteCount){
					actualByteCount += is.read(buf,actualByteCount,desiredByteCount - actualByteCount);
				}
				
				return actualByteCount;
			}
			
	 }


}
